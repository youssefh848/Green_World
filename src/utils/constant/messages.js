const generateMessage = (entity) => ({
  alreadyExist: `${entity} already exist`,
  notExist: `${entity} not found`,
  created: `${entity} created successfully`,
  failToCreate: `Failed to create ${entity}`,
  updated: `${entity} updated successfully`,
  failToUpdate: `Failed to update ${entity}`,
  deleted: `${entity} deleted successfully`,
  failToDelete: `Failed to delete ${entity}`,
  fetchedSuccessfully: `${entity} fetched successfully`,
  failToFetch: `Failed to fetch ${entity}`,
});

export const messages = {
  file: { required: "file is required" },
  user: {
    ...generateMessage("user"),
    verified: "user verified successfully",
    invalidCredntiols: "invalid credentials",
    notVerified: "Your account is not verified. Please check your email and click the verification link to activate your account.",
    invalidToken: "invalid token",
    loginSuccessfully: "login successfully",
    unauthorized: "unauthorized to access this API",
    invalidPassword: "invalid password",
    passwordUpdated: "password updated successfully",
    invalidOTP: "invalid OTP",
    failToUpdatePassword: "failed to update password",
    noAccountsFound: "no accounts found",
    otpSent: "OTP sent successfully",
    cannotDeletAdmin: "Cannot delete an admin account!",
    otpVerified: "OTP verified successfully, you can now login with your credentials",
    fcmUpdated: "FCM Token updated successfully"
  },
  plant: {
    ...generateMessage("plant"),
    invalidTemperatureRange: "Invalid temperature range. Ensure min < max.",
    invalidCategory: "Invalid plant category",
    noCategoryMatch: (category) => `No plants found in the category: ${category}`,
    imageRequired: "Image is required",
    alreadyAdded: "Plant already added",
    notFound: "Plant not found",
    noSuitablePlants: 'No suitable plants found for the current weather conditions.',
    suggestedPlants: 'Plants suggested based on the current weather conditions.',
    unableToGetLocation: 'Unable to retrieve location from IP.',
    unableToGetWeather: 'Unable to retrieve weather data.',
  },
  weather: {
    ...generateMessage("weather"),
    failToLocate: "Failed to locate the weather data.",
    invalidCoordinates: "Invalid coordinates provided.",
    invalidCoordinateRange: "Coordinates must be within valid ranges.",
    cityNameRequired: "City name is required.",
    failToSend: "Failed to send notification.",
    sentSuccessfully: "Notification sent successfully.",
  },
  notification: {
    ...generateMessage("notification"),
    failToSend: "Failed to send notification",
    invalidUserId: "Invalid user ID. Please provide a valid user ID.",
    sentSuccessfully: "Notification sent successfully",
    userIdRequired: "User ID is required to send the notification.",
  }
};
